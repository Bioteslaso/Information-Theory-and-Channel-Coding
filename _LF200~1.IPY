{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Modulaciones digitales"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Funciones necesarias"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def CreaConstelacionQAM(N_signals):\n",
    "    \n",
    "    Nreales      = int(np.ceil(np.sqrt(N_signals)))\n",
    "    Nimaginarios = int(np.ceil(np.sqrt(N_signals)))\n",
    "                 \n",
    "    parte_real  = np.arange( 0, Nreales )\n",
    "    parte_imag  = np.arange( 0, Nimaginarios)\n",
    "    \n",
    "    v_real= np.tile( np.reshape(parte_real, (Nreales,1)), (1,Nimaginarios) ).flatten() # matrix is now Nreales-Nimaginarios\n",
    "    v_imag= np.tile( np.reshape(parte_imag, (1,Nimaginarios)), (Nreales,1) ).flatten() # duplicate imaginary values as many times as real values there are\n",
    "    \n",
    "    Constelacion= v_real+ 1j*v_imag\n",
    "    \n",
    "    # Constelación de media cero y varianza unidad\n",
    "    # Cada elemento del vector es un número complejo que representa una señal\n",
    "    Constelacion = (Constelacion -Constelacion.mean())/np.sqrt(Constelacion.var()) # normalization\n",
    "    return Constelacion\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def CreaConstelacionPSK(N_signals):\n",
    "    \n",
    "    Nreales      =  Nimaginarios = int(np.ceil(np.sqrt(N_signals)))\n",
    "                 \n",
    "    module=1\n",
    "    phase = np.arange( 0, 2*np.pi, 2*np.pi/N_signals)\n",
    "    \n",
    "    v_real= module*np.cos(phase)\n",
    "    v_imag= module*np.sin(phase)\n",
    "    \n",
    "    Constelacion= v_real+ 1j*v_imag\n",
    "    \n",
    "    # Constelación de media cero y varianza unidad\n",
    "    # Cada elemento del vector es un número complejo que representa una señal\n",
    "    Constelacion = (Constelacion -Constelacion.mean())/np.sqrt(Constelacion.var())\n",
    "    return Constelacion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def RepresentaConstelacion(Const):\n",
    "    \n",
    "    plt.plot([-1,1],[0,0],'k')\n",
    "    plt.plot([0,0],[-1,1],'k')\n",
    "    plt.plot(np.real(Const),np.imag(Const),'o');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Convert2Signal(Datos, Constelacion):\n",
    "    \n",
    "    #Obtenemos los bits por símbolo de la constelación\n",
    "    Nbits= int(np.log2(Constelacion.shape[0]))\n",
    "    \n",
    "    # Número de señales a transmitir\n",
    "    N_sign_tx = Datos.shape[0]//Nbits\n",
    "    \n",
    "    # Bloques de bits\n",
    "    bloques= np.reshape(Datos, (N_sign_tx, Nbits))\n",
    "    \n",
    "    #Convertimos de binario a base 10 (identificadores de la señal)\n",
    "    exponentes= np.arange(Nbits-1,-1,-1)    # [ ... 4 3 2 1 0 ]\n",
    "    Potencias2 = np.tile( np.reshape(np.power(2,exponentes),(1,Nbits)), (N_sign_tx,1))\n",
    "    Signal_id = np.reshape( np.sum (bloques * Potencias2, axis=1), (N_sign_tx,1))\n",
    "    # Tamaño (N_sign_tx x 1)\n",
    "    \n",
    "    return Signal_id\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ModularEnTiempo(Signal_id, Ts, Constelacion):\n",
    "    \n",
    "\n",
    "    N_sign_tx = Signal_id.shape[0]\n",
    "\n",
    "    # Creamos las señales en el tiempo:\n",
    "    # Ts muestras temporales\n",
    "    \n",
    "    t = np.arange(0,Ts)             # Tamaño\n",
    "    t = np.reshape(t, (1,Ts))       #         1 x Ts\n",
    "    t = np.tile(t, (N_sign_tx,1) )  # N_sign_tx x Ts\n",
    "    \n",
    "    Signal_idT = np.tile(Signal_id, (1, Ts) )\n",
    "    \n",
    "    Signal_time= np.sqrt(2)*np.abs(Constelacion[Signal_idT])*np.cos(2*np.pi*t/20+np.angle(Constelacion[Signal_idT]))\n",
    "                                 \n",
    "    return Signal_time.flatten()\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Demodular(Signal_timeRx, Ts): # Ts == Tiempo de símbolo\n",
    "    \n",
    "    \n",
    "    N_sign_tx = Signal_timeRx.shape[0]//Ts    \n",
    "    Signals= np.reshape(Signal_timeRx, (N_sign_tx, Ts))\n",
    "    \n",
    "    # Creamos las señales base en el tiempo:\n",
    "    # Ts muestras temporales\n",
    "    t = np.arange(0,Ts)             # Tamaño\n",
    "    t = np.reshape(t, (1,Ts))       #         1 x Ts\n",
    "    t = np.tile(t, (N_sign_tx,1) )    # N_sign_tx x   Ts\n",
    "    \n",
    "    # f= 1/20 frecuencia de la portadora (si Ts son 100 microsegundos, f= 50KHz)\n",
    "    Base_real= np.sqrt(2)*np.cos(2*np.pi*t/20)\n",
    "    Base_imag= np.sqrt(2)*np.cos(2*np.pi*t/20+np.pi/2)\n",
    "    \n",
    "    a = np.mean(Signals * Base_real, axis=1)\n",
    "    b = np.mean(Signals * Base_imag, axis=1)\n",
    "    \n",
    "    Singal_Rx = a +1j*b\n",
    "    \n",
    "    return Singal_Rx\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Distancia(Signals, Constellation):\n",
    "    \n",
    "    S = np.tile( np.reshape( Signals, (Signals.shape[0], 1)) , (1, Constellation.shape[0]) )\n",
    "    C = np.tile( np.reshape( Constellation, (1, Constellation.shape[0])) , (Signals.shape[0],1) )\n",
    "    \n",
    "    dist = np.abs(np.power(S-C,2))\n",
    "    \n",
    "    return dist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Convert2bits(Signal_id, Constelacion):\n",
    "    \n",
    "    #Obtenemos los bits por símbolo de la constelación\n",
    "    Nbits= int(np.log2(Constelacion.shape[0]))\n",
    "    \n",
    "    \n",
    "    bits= np.zeros((Signal_id.shape[0],Nbits), dtype='int')\n",
    "    \n",
    "    for k in range(0,Signal_id.shape[0]):\n",
    "        #bits[k,:]= bitarray(np.binary_repr(Signal_id[k], Nbits));\n",
    "        bits[k,:]= np.fromstring(np.binary_repr(Signal_id[k], Nbits), dtype=np.uint8)==49\n",
    "    \n",
    "    return bits.flatten()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Creación de una constelación"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Numero de senales:', 64)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Modulación QAM\n",
    "Nbits=6\n",
    "N_signals= 2**Nbits\n",
    "print('Numero de senales:', N_signals)\n",
    "\n",
    "Const = CreaConstelacionPSK(N_signals)\n",
    "\n",
    "RepresentaConstelacion(Const)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Potencia media de la constelación"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Varianza de la constelaci\\xc3\\xb3n:', 1.0)\n"
     ]
    }
   ],
   "source": [
    "print('Varianza de la constelación:', Const.var())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Creación de la señal en el tiempo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[23 61 30 ... 53  0 15]\n"
     ]
    }
   ],
   "source": [
    "# Creamos datos binarios para convertirlos en señales en el tiempo\n",
    "# Usamos una longitud múltiplo de Nbits para poder convertir los datos en señales (una señal cada Nbits)\n",
    "# Por ejemplo, 5*Nbits => transmitiremos 5 señales\n",
    "Datos_binarios=(np.random.rand(1000000*Nbits)<0.5)*1;\n",
    "\n",
    "if(Datos_binarios.shape[0]<10):\n",
    "    fig=plt.figure(figsize=(8, 4))\n",
    "    plt.stem(Datos_binarios);\n",
    "    plt.title('Señal binaria aleatoria');\n",
    "\n",
    "Ts=100 # Tiempo de simbolo = 100 (por ejemplo 100 microsegundos)\n",
    "Signal_id= Convert2Signal(Datos_binarios, Const)\n",
    "print Signal_id.flatten()\n",
    "Signal_time= ModularEnTiempo(Signal_id, Ts, Const)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0000000000000027"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Potencia promedio de la señal\n",
    "Signal_time.var()\n",
    "# ¿Por qué la potencia promedio cambia con la señal? ¿No debería ser igual a 1?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "if(Datos_binarios.shape[0]<1000):\n",
    "    fig=plt.figure(figsize=(8, 4))\n",
    "    plt.plot(Signal_time)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Añadimos ruido"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Potencia de ruido\n",
    "N = 2\n",
    "Ruido= np.sqrt(N)*np.random.randn(Signal_time.shape[0])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "Signal_timeRx= Signal_time + Ruido\n",
    "\n",
    "if(Datos_binarios.shape[0]<1000):\n",
    "    fig=plt.figure(figsize=(8, 4))\n",
    "    plt.plot(Signal_timeRx)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "if(Datos_binarios.shape[0]<1000):\n",
    "    fig=plt.figure(figsize=(16, 8))\n",
    "\n",
    "    #EspectroRx=np.fft.fft(Signal_timeRx)\n",
    "    #plt.plot(np.abs(EspectroRx))\n",
    "\n",
    "    EspectroNoise=np.fft.fft(Ruido)\n",
    "    plt.plot(np.abs(EspectroNoise))\n",
    "\n",
    "    EspectroTx=np.fft.fft(Signal_time)\n",
    "    plt.plot(np.abs(EspectroTx))\n",
    "\n",
    "    plt.legend([ 'EspectroNoise', 'EsprectroTx'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Leemos de nuevo la señal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "Signal_Rx= Demodular(Signal_timeRx, Ts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "RepresentaConstelacion(Const)\n",
    "plt.plot(np.real(Signal_Rx), np.imag(Signal_Rx),'r*', mfc='none');\n",
    "plt.plot(np.real(Const[Signal_id]), np.imag(Const[Signal_id]),'go');\n",
    "# Los puntos verdes son las señales enviadas, los rojos los valores recibidos"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Obtenemos el identificador para cada señal (señal mas cercana)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "MemoryError",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mMemoryError\u001b[0m                               Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-34-af956f578c42>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mdist\u001b[0m\u001b[1;33m=\u001b[0m \u001b[0mDistancia\u001b[0m\u001b[1;33m(\u001b[0m \u001b[0mSignal_Rx\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mConst\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[0mSignal_id_Rx\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0margmin\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdist\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[1;32mprint\u001b[0m\u001b[1;33m(\u001b[0m \u001b[1;34m'Señales obtenidas: '\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mSignal_id_Rx\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;32mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'Señales originales:'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mSignal_id\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-8-188e60638f16>\u001b[0m in \u001b[0;36mDistancia\u001b[1;34m(Signals, Constellation)\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m     \u001b[0mS\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtile\u001b[0m\u001b[1;33m(\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[1;33m(\u001b[0m \u001b[0mSignals\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mSignals\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m,\u001b[0m \u001b[1;33m(\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mConstellation\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 4\u001b[1;33m     \u001b[0mC\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtile\u001b[0m\u001b[1;33m(\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[1;33m(\u001b[0m \u001b[0mConstellation\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m(\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mConstellation\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m,\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mSignals\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      5\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      6\u001b[0m     \u001b[0mdist\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mabs\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpower\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mS\u001b[0m\u001b[1;33m-\u001b[0m\u001b[0mC\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\envs\\py2\\lib\\site-packages\\numpy\\lib\\shape_base.pyc\u001b[0m in \u001b[0;36mtile\u001b[1;34m(A, reps)\u001b[0m\n\u001b[0;32m   1239\u001b[0m         \u001b[1;32mfor\u001b[0m \u001b[0mdim_in\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnrep\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mc\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtup\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1240\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mnrep\u001b[0m \u001b[1;33m!=\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1241\u001b[1;33m                 \u001b[0mc\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mc\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mn\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrepeat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnrep\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1242\u001b[0m             \u001b[0mn\u001b[0m \u001b[1;33m//=\u001b[0m \u001b[0mdim_in\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1243\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mc\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mshape_out\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mMemoryError\u001b[0m: "
     ]
    }
   ],
   "source": [
    "dist= Distancia( Signal_Rx, Const)\n",
    "Signal_id_Rx = np.argmin(dist, axis=1)\n",
    "print( 'Señales obtenidas: ', Signal_id_Rx)\n",
    "print('Señales originales:', Signal_id[:,0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Noise power in baseband:', 0.04001833108667958)\n"
     ]
    }
   ],
   "source": [
    "Baseband_noise = Signal_Rx-Const[Signal_id[:,0]]\n",
    "print('Noise power in baseband:', Baseband_noise.var())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('SNR=', 24.988527038364882)\n"
     ]
    }
   ],
   "source": [
    "SNR= Const[Signal_id[:,0]].var()/Baseband_noise.var()\n",
    "print('SNR=',SNR)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Calculamos la BER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\envs\\py2\\lib\\site-packages\\ipykernel_launcher.py:11: DeprecationWarning: The binary mode of fromstring is deprecated, as it behaves surprisingly on unicode inputs. Use frombuffer instead\n",
      "  # This is added back by InteractiveShellApp.init_path()\n"
     ]
    }
   ],
   "source": [
    "# Primero convertimos las señales en bits\n",
    "bits= Convert2bits(Signal_id_Rx, Const)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 1, ..., 1, 1, 1])"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 0, ..., 1, 1, 1])"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Datos_binarios"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "if(Datos_binarios.shape[0]<10):\n",
    "    plt.stem(Datos_binarios);\n",
    "    plt.title('Original');\n",
    "    plt.figure();\n",
    "    plt.stem(bits); \n",
    "    plt.title('Recibido');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('BER=', 0.039419666666666665)\n"
     ]
    }
   ],
   "source": [
    "BER= np.mean(Datos_binarios!=bits)\n",
    "print('BER=', BER)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
